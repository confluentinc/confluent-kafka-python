version: v1.0
name: Test on PR or create and upload wheels on tag.
agent:
  machine:
    type: s1-prod-ubuntu20-04-amd64-1
execution_time_limit:
  hours: 3
global_job_config:
  env_vars:
    - name: LIBRDKAFKA_VERSION
      value: v2.3.0
  prologue:
    commands:
      - checkout
      - mkdir artifacts
      - mkdir -p /tmp/clamav-db
      - curl https://cfltavupdates.s3.us-west-2.amazonaws.com/downloads/signatures.tgz -o /tmp/clamav-db/signatures.tgz
      - tar -xzf /tmp/clamav-db/signatures.tgz -C /tmp/clamav-db
blocks:
  - name: "Wheels: OSX x64"
    run:
      when: "tag =~ '.*'"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-macos-13-5-amd64
      env_vars:
        - name: OS_NAME
          value: osx
        - name: ARCH
          value: x64
      jobs:
        - name: Build
          commands:
            - PIP_INSTALL_OPTIONS="--user" tools/wheels/build-wheels.sh "${LIBRDKAFKA_VERSION#v}" wheelhouse
            - clamscan -d /tmp/clamav-db --max-scansize=1024M --max-filesize=1024M -ir wheelhouse > python-mac-x86-malware-scan.txt || ( . assume-iam-role arn:aws:iam::368821881613:role/semaphore-access ; aws s3 cp python-mac-x86-malware-scan.txt s3://malware-scan-results/librdkafka/$SEMAPHORE_GIT_TAG_NAME/python-mac-x86-malware-scan.txt; false)
            - tar -czf wheelhouse-macOS-${ARCH}.tgz wheelhouse
            - artifact push workflow wheelhouse-macOS-${ARCH}.tgz --destination artifacts/wheels-${OS_NAME}-${ARCH}.tgz/
  - name: "Wheels: OSX arm64"
    run:
      when: "tag =~ '.*'"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-macos-13-5-arm64
      env_vars:
        - name: OS_NAME
          value: osx
        - name: CIBW_ARCHS
          value: arm64
        - name: ARCH
          value: arm64
      jobs:
        - name: Build
          commands:
            - PIP_INSTALL_OPTIONS="--user" tools/wheels/build-wheels.sh "${LIBRDKAFKA_VERSION#v}" wheelhouse
            - clamscan -d /tmp/clamav-db --max-scansize=1024M --max-filesize=1024M -ir wheelhouse > python-mac-arm-malware-scan.txt || ( . assume-iam-role arn:aws:iam::368821881613:role/semaphore-access ; aws s3 cp python-mac-arm-malware-scan.txt s3://malware-scan-results/librdkafka/$SEMAPHORE_GIT_TAG_NAME/python-mac-arm-malware-scan.txt; false)
            - tar -czf wheelhouse-macOS-${ARCH}.tgz wheelhouse
            - artifact push workflow wheelhouse-macOS-${ARCH}.tgz --destination artifacts/wheels-${OS_NAME}-${ARCH}.tgz/
  - name: "Wheels: Linux arm64"
    run:
      when: "tag =~ '.*'"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-arm64-1
      env_vars:
        - name: OS_NAME
          value: linux
        - name: ARCH
          value: arm64
      jobs:
        - name: Build
          commands:
            - ./tools/build-manylinux.sh "${LIBRDKAFKA_VERSION#v}"
            - clamscan -d /tmp/clamav-db --max-scansize=1024M --max-filesize=1024M -ir wheelhouse > python-linux-x86-malware-scan.txt || ( . assume-iam-role arn:aws:iam::368821881613:role/semaphore-access ; aws s3 cp python-linux-x86-malware-scan.txt s3://malware-scan-results/librdkafka/$SEMAPHORE_GIT_TAG_NAME/python-linux-x86-malware-scan.txt; false)
            - tar -czf wheelhouse-linux-${ARCH}.tgz wheelhouse
            - artifact push workflow wheelhouse-linux-${ARCH}.tgz --destination artifacts/wheels-${OS_NAME}-${ARCH}.tgz/
  - name: "Wheels: Linux x64"
    run:
      when: "tag =~ '.*'"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-amd64-3
      env_vars:
        - name: OS_NAME
          value: linux
        - name: ARCH
          value: x64
      jobs:
        - name: Build
          commands:
            - ./tools/wheels/build-wheels.sh "${LIBRDKAFKA_VERSION#v}" wheelhouse
            - clamscan -d /tmp/clamav-db --max-scansize=1024M --max-filesize=1024M -ir wheelhouse > python-linux-x86-malware-scan.txt || ( . assume-iam-role arn:aws:iam::368821881613:role/semaphore-access ; aws s3 cp python-linux-x86-malware-scan.txt s3://malware-scan-results/librdkafka/$SEMAPHORE_GIT_TAG_NAME/python-linux-x86-malware-scan.txt; false)
            - tar -czf wheelhouse-linux-${ARCH}.tgz wheelhouse
            - artifact push workflow wheelhouse-linux-${ARCH}.tgz --destination artifacts/wheels-${OS_NAME}-${ARCH}.tgz/
  - name: "Wheels: Windows"
    run:
      when: "tag =~ '.*'"
    dependencies: []
    task:
      agent:
          machine:
            type: s1-prod-windows
      env_vars:
        - name: OS_NAME
          value: windows
        - name: ARCH
          value: x64
      prologue:
        commands:
          - ".\\tools\\mingw-w64\\setup-msys2.ps1"
          - $env:PATH = 'C:\msys64\usr\bin;' + $env:PATH
          - bash -lc './tools/mingw-w64/msys2-dependencies.sh'
          - Invoke-WebRequest -Uri https://malware-scan-clamav-signatures.s3.us-west-2.amazonaws.com/clamav-signatures.zip  -OutFile clamav-signatures.zip
          - powershell -command "Expand-Archive clamav-signatures.zip C:\clamav-db"
          - del clamav-signatures.zip
      jobs:
        - name: Build
          env_vars:
            - name: CHERE_INVOKING
              value: 'yes'
            - name: MSYSTEM
              value: UCRT64
          commands:
            - bash tools/mingw-w64/semaphore_commands.sh
            - bash tools/wheels/install-librdkafka.sh $env:LIBRDKAFKA_VERSION.TrimStart("v") dest
            - tools/wheels/build-wheels.bat x64 win_amd64 dest wheelhouse
            - clamscan -d C:\clamav-db --max-scansize=1024M --max-filesize=1024M -ir wheelhouse > python-win-malware-scan-results.txt; if ($?){artifact push workflow python-win-malware-scan-results.txt} else {artifact push workflow python-win-malware-scan-results.txt; exit /b 1}
            - tar -czf wheelhouse-windows-${Env:ARCH}.tgz wheelhouse
            - artifact push workflow wheelhouse-windows-${Env:ARCH}.tgz --destination artifacts/wheels-${Env:OS_NAME}-${Env:ARCH}.tgz/
  - name: "Source package verification and Integration tests with Python 3 (Linux x64)"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-amd64-2
      env_vars:
        - name: OS_NAME
          value: linux
        - name: ARCH
          value: x64
      prologue:
        commands:
          - docker login --username $DOCKERHUB_USER --password $DOCKERHUB_APIKEY
      jobs:
        - name: Build
          commands:
            - sem-version python 3.8
            # use a virtualenv
            - python3 -m venv _venv && source _venv/bin/activate
            - chmod u+r+x tools/source-package-verification.sh
            - tools/source-package-verification.sh
  - name: "Source package verification with Python 3 (Linux arm64)"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-arm64-1
      env_vars:
        - name: OS_NAME
          value: linux
        - name: ARCH
          value: arm64
      jobs:
        - name: Build
          commands:
            - sem-version python 3.8
            # use a virtualenv
            - python3 -m venv _venv && source _venv/bin/activate
            - chmod u+r+x tools/source-package-verification.sh
            - tools/source-package-verification.sh
  - name: "Source package verification with Python 3 (OSX x64) +docs"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-macos-13-5-amd64
      env_vars:
        - name: OS_NAME
          value: osx
        - name: ARCH
          value: x64
      jobs:
        - name: Build
          commands:
            - sem-version python 3.8
            # use a virtualenv
            - python3 -m venv _venv && source _venv/bin/activate
            - chmod u+r+x tools/source-package-verification.sh
            - tools/source-package-verification.sh
  - name: "Source package verification with Python 3 (OSX arm64) +docs"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-macos-13-5-arm64
      env_vars:
        - name: OS_NAME
          value: osx
        - name: ARCH
          value: arm64
      jobs:
        - name: Build
          commands:
            - sem-version python 3.8
            # use a virtualenv
            - python3 -m venv _venv && source _venv/bin/activate
            - chmod u+r+x tools/source-package-verification.sh
            - tools/source-package-verification.sh
  - name: "Packaging"
    run:
      when: "tag =~ '.*'"
    dependencies:
      - "Wheels: OSX x64"
      - "Wheels: OSX arm64"
      - "Wheels: Linux arm64"
      - "Wheels: Linux x64"
      - "Wheels: Windows"
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-amd64-3
      jobs:
        - name: "Packaging all artifacts"
          commands:
            - artifact pull workflow artifacts
            - cd artifacts
            - ls *.tgz |xargs -n1 tar -xvf
            - tar cvf confluent-kafka-python-wheels-${SEMAPHORE_GIT_TAG_NAME}-${SEMAPHORE_WORKFLOW_ID}.tgz wheelhouse/
            - ls -la
            - sha256sum confluent-kafka-python-wheels-${SEMAPHORE_GIT_TAG_NAME}-${SEMAPHORE_WORKFLOW_ID}.tgz
            - cd ..
            - artifact push project artifacts/confluent-kafka-python-wheels-${SEMAPHORE_GIT_TAG_NAME}-${SEMAPHORE_WORKFLOW_ID}.tgz --destination confluent-kafka-python-wheels-${SEMAPHORE_GIT_TAG_NAME}-${SEMAPHORE_WORKFLOW_ID}.tgz
            - echo Thank you
