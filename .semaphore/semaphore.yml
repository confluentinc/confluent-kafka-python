version: v1.0
name: Test on PR or create and upload wheels on tag.
agent:
  machine:
    type: s1-prod-ubuntu20-04-amd64-1
global_job_config:
  env_vars:
    - name: LIBRDKAFKA_VERSION
      value: v1.9.2
  prologue:
    commands:
      - checkout
blocks:
  - name: "Wheels: OSX x64"
    run:
      when: "tag =~ '.*'"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-macos
      env_vars:
        - name: OS_NAME
          value: osx
        - name: ARCH
          value: x64
      jobs:
        - name: Build
          commands:
            - PIP_INSTALL_OPTIONS="--user" tools/wheels/build-wheels.sh "${LIBRDKAFKA_VERSION#v}" wheelhouse
            - tar -czf wheelhouse-macOS-${ARCH}.tgz wheelhouse
            - artifact push workflow wheelhouse-macOS-${ARCH}.tgz
  - name: "Wheels: OSX arm64"
    run:
      when: "tag =~ '.*'"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-macos-arm64
      env_vars:
        - name: OS_NAME
          value: osx
        - name: CIBW_ARCHS
          value: arm64
        - name: ARCH
          value: arm64
      jobs:
        - name: Build
          commands:
            - PIP_INSTALL_OPTIONS="--user" tools/wheels/build-wheels.sh "${LIBRDKAFKA_VERSION#v}" wheelhouse
            - tar -czf wheelhouse-macOS-${ARCH}.tgz wheelhouse
            - artifact push workflow wheelhouse-macOS-${ARCH}.tgz

  - name: Source package verification with Python 3 (OSX x64) +docs
    run:
      when: "tag =~ '.*'"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-macos
      env_vars:
        - name: OS_NAME
          value: osx
        - name: ARCH
          value: arm64
      jobs:
        - name: Build
          commands:
            # use a virtualenv
            - python3 -m venv _venv && source _venv/bin/activate
            - pip install -r docs/requirements.txt
            - pip install -U protobuf
            # install librdkafka
            - lib_dir=dest/runtimes/$OS_NAME-$ARCH/native
            - tools/wheels/install-librdkafka.sh "${LIBRDKAFKA_VERSION#v}" dest
            - export CFLAGS="$CFLAGS -I${PWD}/dest/build/native/include"
            - export LDFLAGS="$LDFLAGS -L${PWD}/${lib_dir}"
            - export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$PWD/$lib_dir"
            - export DYLD_LIBRARY_PATH="$DYLD_LIBRARY_PATH:$PWD/$lib_dir"
            # install confluent-kafka
            - python setup.py build && python setup.py install
            - make docs
  - name: "Wheels: Linux"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-amd64-2
      env_vars:
        - name: OS_NAME
          value: linux
        - name: ARCH
          value: x64
      jobs:
        - name: Build
          commands:
            - sem-version python 3.8
            - PIP_INSTALL_OPTIONS="--user" tools/wheels/build-wheels.sh "${LIBRDKAFKA_VERSION#v}" wheelhouse
            - tar -czf wheelhouse-linux-${ARCH}.tgz wheelhouse
            - artifact push workflow wheelhouse-linux-${ARCH}.tgz
  - name: "Wheels: Linux arm64"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-arm64-1
      env_vars:
        - name: OS_NAME
          value: linux
        - name: ARCH
          value: arm64
        - name: CIBW_ARCHS
          value: aarch64
        - name: CIBW_ENVIRONMENT
          value: AUDITWHEEL_PLAT="manylinux_2_28_aarch64"
        - name: CIBW_MANYLINUX_*_IMAGE
          value: manylinux_2_28
        - name: CIBW_REPAIR_WHEEL_COMMAND
          value: auditwheel repair -w {dest_dir} {wheel} --plat manylinux_2_28_aarch64
      jobs:
        - name: Build
          commands:
            - sem-version python 3.8
            - python -m pip install --upgrade pip
            - PIP_INSTALL_OPTIONS="--user" tools/wheels/build-wheels.sh "${LIBRDKAFKA_VERSION#v}" wheelhouse
            - tar -czf wheelhouse-linux-${ARCH}.tgz wheelhouse
            - artifact push workflow wheelhouse-linux-${ARCH}.tgz
