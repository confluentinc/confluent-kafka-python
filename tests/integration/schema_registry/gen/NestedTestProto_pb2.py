# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: NestedTestProto.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import timestamp_pb2 as google_dot_protobuf_dot_timestamp__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='NestedTestProto.proto',
  package='tests.integration.serialization.data',
  syntax='proto3',
  serialized_pb=_b('\n\x15NestedTestProto.proto\x12$tests.integration.serialization.data\x1a\x1fgoogle/protobuf/timestamp.proto\"\x8c\x01\n\x06UserId\x12\x17\n\rkafka_user_id\x18\x01 \x01(\tH\x00\x12\x17\n\rother_user_id\x18\x02 \x01(\x05H\x00\x12\x45\n\nanother_id\x18\x03 \x01(\x0b\x32/.tests.integration.serialization.data.MessageIdH\x00\x42\t\n\x07user_id\"\x17\n\tMessageId\x12\n\n\x02id\x18\x01 \x01(\t\"R\n\x0b\x43omplexType\x12\x10\n\x06one_id\x18\x01 \x01(\tH\x00\x12\x12\n\x08other_id\x18\x02 \x01(\x05H\x00\x12\x11\n\tis_active\x18\x03 \x01(\x08\x42\n\n\x08some_val\"\xd0\x04\n\rNestedMessage\x12=\n\x07user_id\x18\x01 \x01(\x0b\x32,.tests.integration.serialization.data.UserId\x12\x11\n\tis_active\x18\x02 \x01(\x08\x12\x1a\n\x12\x65xperiments_active\x18\x03 \x03(\t\x12<\n\x06status\x18\x05 \x01(\x0e\x32,.tests.integration.serialization.data.Status\x12G\n\x0c\x63omplex_type\x18\x06 \x01(\x0b\x32\x31.tests.integration.serialization.data.ComplexType\x12R\n\x08map_type\x18\x07 \x03(\x0b\x32@.tests.integration.serialization.data.NestedMessage.MapTypeEntry\x12O\n\x05inner\x18\x08 \x01(\x0b\x32@.tests.integration.serialization.data.NestedMessage.InnerMessage\x1a.\n\x0cMapTypeEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x1a/\n\x0cInnerMessage\x12\x0e\n\x02id\x18\x01 \x01(\tR\x02id\x12\x0f\n\x03ids\x18\x02 \x03(\x05\x42\x02\x10\x01\"(\n\tInnerEnum\x12\x08\n\x04ZERO\x10\x00\x12\r\n\tALSO_ZERO\x10\x00\x1a\x02\x10\x01J\x04\x08\x0e\x10\x0fJ\x04\x08\x0f\x10\x10J\x04\x08\t\x10\x0cR\x03\x66ooR\x03\x62\x61r*\"\n\x06Status\x12\n\n\x06\x41\x43TIVE\x10\x00\x12\x0c\n\x08INACTIVE\x10\x01\x42\x41\n,io.confluent.kafka.serializers.protobuf.testB\x0fNestedTestProtoP\x00\x62\x06proto3')
  ,
  dependencies=[google_dot_protobuf_dot_timestamp__pb2.DESCRIPTOR,])

_STATUS = _descriptor.EnumDescriptor(
  name='Status',
  full_name='tests.integration.serialization.data.Status',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACTIVE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INACTIVE', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=943,
  serialized_end=977,
)
_sym_db.RegisterEnumDescriptor(_STATUS)

Status = enum_type_wrapper.EnumTypeWrapper(_STATUS)
ACTIVE = 0
INACTIVE = 1


_NESTEDMESSAGE_INNERENUM = _descriptor.EnumDescriptor(
  name='InnerEnum',
  full_name='tests.integration.serialization.data.NestedMessage.InnerEnum',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ZERO', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ALSO_ZERO', index=1, number=0,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=_descriptor._ParseOptions(descriptor_pb2.EnumOptions(), _b('\020\001')),
  serialized_start=873,
  serialized_end=913,
)
_sym_db.RegisterEnumDescriptor(_NESTEDMESSAGE_INNERENUM)


_USERID = _descriptor.Descriptor(
  name='UserId',
  full_name='tests.integration.serialization.data.UserId',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='kafka_user_id', full_name='tests.integration.serialization.data.UserId.kafka_user_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='other_user_id', full_name='tests.integration.serialization.data.UserId.other_user_id', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='another_id', full_name='tests.integration.serialization.data.UserId.another_id', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='user_id', full_name='tests.integration.serialization.data.UserId.user_id',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=97,
  serialized_end=237,
)


_MESSAGEID = _descriptor.Descriptor(
  name='MessageId',
  full_name='tests.integration.serialization.data.MessageId',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='tests.integration.serialization.data.MessageId.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=239,
  serialized_end=262,
)


_COMPLEXTYPE = _descriptor.Descriptor(
  name='ComplexType',
  full_name='tests.integration.serialization.data.ComplexType',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='one_id', full_name='tests.integration.serialization.data.ComplexType.one_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='other_id', full_name='tests.integration.serialization.data.ComplexType.other_id', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='is_active', full_name='tests.integration.serialization.data.ComplexType.is_active', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='some_val', full_name='tests.integration.serialization.data.ComplexType.some_val',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=264,
  serialized_end=346,
)


_NESTEDMESSAGE_MAPTYPEENTRY = _descriptor.Descriptor(
  name='MapTypeEntry',
  full_name='tests.integration.serialization.data.NestedMessage.MapTypeEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='tests.integration.serialization.data.NestedMessage.MapTypeEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='value', full_name='tests.integration.serialization.data.NestedMessage.MapTypeEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=776,
  serialized_end=822,
)

_NESTEDMESSAGE_INNERMESSAGE = _descriptor.Descriptor(
  name='InnerMessage',
  full_name='tests.integration.serialization.data.NestedMessage.InnerMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='tests.integration.serialization.data.NestedMessage.InnerMessage.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, json_name='id', file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='ids', full_name='tests.integration.serialization.data.NestedMessage.InnerMessage.ids', index=1,
      number=2, type=5, cpp_type=1, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001')), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=824,
  serialized_end=871,
)

_NESTEDMESSAGE = _descriptor.Descriptor(
  name='NestedMessage',
  full_name='tests.integration.serialization.data.NestedMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='user_id', full_name='tests.integration.serialization.data.NestedMessage.user_id', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='is_active', full_name='tests.integration.serialization.data.NestedMessage.is_active', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='experiments_active', full_name='tests.integration.serialization.data.NestedMessage.experiments_active', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='status', full_name='tests.integration.serialization.data.NestedMessage.status', index=3,
      number=5, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='complex_type', full_name='tests.integration.serialization.data.NestedMessage.complex_type', index=4,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='map_type', full_name='tests.integration.serialization.data.NestedMessage.map_type', index=5,
      number=7, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='inner', full_name='tests.integration.serialization.data.NestedMessage.inner', index=6,
      number=8, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_NESTEDMESSAGE_MAPTYPEENTRY, _NESTEDMESSAGE_INNERMESSAGE, ],
  enum_types=[
    _NESTEDMESSAGE_INNERENUM,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=349,
  serialized_end=941,
)

_USERID.fields_by_name['another_id'].message_type = _MESSAGEID
_USERID.oneofs_by_name['user_id'].fields.append(
  _USERID.fields_by_name['kafka_user_id'])
_USERID.fields_by_name['kafka_user_id'].containing_oneof = _USERID.oneofs_by_name['user_id']
_USERID.oneofs_by_name['user_id'].fields.append(
  _USERID.fields_by_name['other_user_id'])
_USERID.fields_by_name['other_user_id'].containing_oneof = _USERID.oneofs_by_name['user_id']
_USERID.oneofs_by_name['user_id'].fields.append(
  _USERID.fields_by_name['another_id'])
_USERID.fields_by_name['another_id'].containing_oneof = _USERID.oneofs_by_name['user_id']
_COMPLEXTYPE.oneofs_by_name['some_val'].fields.append(
  _COMPLEXTYPE.fields_by_name['one_id'])
_COMPLEXTYPE.fields_by_name['one_id'].containing_oneof = _COMPLEXTYPE.oneofs_by_name['some_val']
_COMPLEXTYPE.oneofs_by_name['some_val'].fields.append(
  _COMPLEXTYPE.fields_by_name['other_id'])
_COMPLEXTYPE.fields_by_name['other_id'].containing_oneof = _COMPLEXTYPE.oneofs_by_name['some_val']
_NESTEDMESSAGE_MAPTYPEENTRY.containing_type = _NESTEDMESSAGE
_NESTEDMESSAGE_INNERMESSAGE.containing_type = _NESTEDMESSAGE
_NESTEDMESSAGE.fields_by_name['user_id'].message_type = _USERID
_NESTEDMESSAGE.fields_by_name['status'].enum_type = _STATUS
_NESTEDMESSAGE.fields_by_name['complex_type'].message_type = _COMPLEXTYPE
_NESTEDMESSAGE.fields_by_name['map_type'].message_type = _NESTEDMESSAGE_MAPTYPEENTRY
_NESTEDMESSAGE.fields_by_name['inner'].message_type = _NESTEDMESSAGE_INNERMESSAGE
_NESTEDMESSAGE_INNERENUM.containing_type = _NESTEDMESSAGE
DESCRIPTOR.message_types_by_name['UserId'] = _USERID
DESCRIPTOR.message_types_by_name['MessageId'] = _MESSAGEID
DESCRIPTOR.message_types_by_name['ComplexType'] = _COMPLEXTYPE
DESCRIPTOR.message_types_by_name['NestedMessage'] = _NESTEDMESSAGE
DESCRIPTOR.enum_types_by_name['Status'] = _STATUS
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

UserId = _reflection.GeneratedProtocolMessageType('UserId', (_message.Message,), dict(
  DESCRIPTOR = _USERID,
  __module__ = 'NestedTestProto_pb2'
  # @@protoc_insertion_point(class_scope:tests.integration.serialization.data.UserId)
  ))
_sym_db.RegisterMessage(UserId)

MessageId = _reflection.GeneratedProtocolMessageType('MessageId', (_message.Message,), dict(
  DESCRIPTOR = _MESSAGEID,
  __module__ = 'NestedTestProto_pb2'
  # @@protoc_insertion_point(class_scope:tests.integration.serialization.data.MessageId)
  ))
_sym_db.RegisterMessage(MessageId)

ComplexType = _reflection.GeneratedProtocolMessageType('ComplexType', (_message.Message,), dict(
  DESCRIPTOR = _COMPLEXTYPE,
  __module__ = 'NestedTestProto_pb2'
  # @@protoc_insertion_point(class_scope:tests.integration.serialization.data.ComplexType)
  ))
_sym_db.RegisterMessage(ComplexType)

NestedMessage = _reflection.GeneratedProtocolMessageType('NestedMessage', (_message.Message,), dict(

  MapTypeEntry = _reflection.GeneratedProtocolMessageType('MapTypeEntry', (_message.Message,), dict(
    DESCRIPTOR = _NESTEDMESSAGE_MAPTYPEENTRY,
    __module__ = 'NestedTestProto_pb2'
    # @@protoc_insertion_point(class_scope:tests.integration.serialization.data.NestedMessage.MapTypeEntry)
    ))
  ,

  InnerMessage = _reflection.GeneratedProtocolMessageType('InnerMessage', (_message.Message,), dict(
    DESCRIPTOR = _NESTEDMESSAGE_INNERMESSAGE,
    __module__ = 'NestedTestProto_pb2'
    # @@protoc_insertion_point(class_scope:tests.integration.serialization.data.NestedMessage.InnerMessage)
    ))
  ,
  DESCRIPTOR = _NESTEDMESSAGE,
  __module__ = 'NestedTestProto_pb2'
  # @@protoc_insertion_point(class_scope:tests.integration.serialization.data.NestedMessage)
  ))
_sym_db.RegisterMessage(NestedMessage)
_sym_db.RegisterMessage(NestedMessage.MapTypeEntry)
_sym_db.RegisterMessage(NestedMessage.InnerMessage)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n,io.confluent.kafka.serializers.protobuf.testB\017NestedTestProtoP\000'))
_NESTEDMESSAGE_MAPTYPEENTRY.has_options = True
_NESTEDMESSAGE_MAPTYPEENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_NESTEDMESSAGE_INNERMESSAGE.fields_by_name['ids'].has_options = True
_NESTEDMESSAGE_INNERMESSAGE.fields_by_name['ids']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))
_NESTEDMESSAGE_INNERENUM.has_options = True
_NESTEDMESSAGE_INNERENUM._options = _descriptor._ParseOptions(descriptor_pb2.EnumOptions(), _b('\020\001'))
# @@protoc_insertion_point(module_scope)
